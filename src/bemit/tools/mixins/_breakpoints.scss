////
/// @group Tools
/// @author David Sanchez
////

/// Hasta el punto de interrupcion.
/// @param {String | Number} $bp - Breakpoint que se tomara como máximo.

@mixin to($bp) {
  @if is-core-breakpoint($bp) {
    @if $bp == nth($sizes, 1) {
      @content;
    } @else {
      @media screen and (max-width: get-breakpoint($bp)) {
        @content;
      }
    }
  } @else if is-breakpoint-valid($bp) {
    @media screen and (max-width: $bp) {
      @content;
    }
  } @else {
    @error 'El mixin solo recibe: [#{$sizes}], o un numero en px, em o rem';
  }
}

/// Desde el punto de interrupcion.
/// @param {String | Number} $bp - Breakpoint que se tomara como minimo.

@mixin from($bp) {
  @if is-core-breakpoint($bp) {
    @if $bp == nth($sizes, 1) {
      @content;
    } @else {
      @media screen and (min-width: get-breakpoint($bp)) {
        @content;
      }
    }
  } @else if is-breakpoint-valid($bp) {
    @media screen and (min-width: $bp) {
      @content;
    }
  } @else {
    @error 'El mixin solo recibe: [#{$sizes}], o un numero en px, em o rem';
  }
}

/// Entre el intervalo
/// @param {String | Number} $from - Breakpoint que se tomara como minimo.
/// @param {String | Number} $to - Breakpoint que se tomara como máximo.

@mixin fromTo($from, $to) {
  @if is-core-breakpoint($from) and is-core-breakpoint($to) {
    @if get-breakpoint($to) > get-breakpoint($from) {
      @media screen and (min-width: get-breakpoint($from)) and (max-width: #{get-breakpoint($to) - 0.1}) {
        @content;
      }
    } @else {
      @error 'El segundo argumento debe ser mayor';
    }
  } @else if is-core-breakpoint($from) and not is-core-breakpoint($to) {
    @if is-breakpoint-valid($to) {
      @if to-px($to) > to-px(get-breakpoint($from)) {
        @media screen and (min-width: get-breakpoint($from)) and (max-width: to-px($to)) {
          @content;
        }
      } @else {
        @error 'El segundo argumento debe ser mayor';
      }
    } @else {
      @error "El segundo argumento debe ser: [#{$sizes}]";
    }
  } @else if not is-core-breakpoint($from) and is-core-breakpoint($to) {
    @if is-breakpoint-valid($from) {
      @if to-px(get-breakpoint($to)) > to-px($from) {
        @media screen and (min-width: to-px($from)) and (max-width: get-breakpoint($to)) {
          @content;
        }
      } @else {
        @error 'El primer argumento debe ser mayor';
      }
    } @else {
      @error "El primer argumento debe ser: [#{$sizes}]";
    }
  } @else {
    @error 'El mixin solo recibe: [#{$sizes}], o un numero en px, em o rem';
  }
}

/// Caso especifico para el mixin fronTo, solo se toma 1 región de los breakpoints.
/// @param {String | Number} $bp - Breakpoint especifico.

@mixin only($bp) {
  @if is-core-breakpoint($bp) {
    @if $bp != nth($sizes, length($sizes)) {
      $index: index($sizes, $bp);
      $bp-next: nth($sizes, $index + 1);

      @include fromTo($bp, $bp-next) {
        @content;
      }
    } @else {
      @include from($bp) {
        @content;
      }
    }
  } @else {
    @error 'El mixin solo recibe: [#{$sizes}]';
  }
}

/// Añade el tipo de la capa de la arquitectura ITCSS en las clases.
/// @param {String} $prefix 'o' - Prefijo que representa la capa de ITCSS.
/// @param {String} $sufix - Sufijo que se añadirá al nombre del selector.

@mixin breakpoints($prefix: 'o', $sufix: '') {
  @each $size in $sizes {
    $new-size: convert-bp($size);
    @include from($size) {
      .#{$prefix}#{$new-size}#{$sufix} {
        @content;
      }
    }
  }
}
